
/*
PASS - closed module ref
A :: (Z :: { y :: Float })
     -> { x :: Float, y :: Float }
*/
module A(Z) {
  val x = 1 + Z.y
  val y = x + Z.y
}

/*
PASS - poly module ref
B :: (Z :: { y :: a })
     -> { x :: a }
*/
module B(Z) {
  val x = Z.y
}

/*
PASS - multiple module refs
C :: (Z :: { y :: Bool }
     ,Y :: { y :: a, z :: Bool })
     -> { x :: Bool, y :: a }
*/
module C(Z, Y) {
  val x = Z.y and Y.z
  val y = Y.y
}

/*
PASS - static module call
D :: (Z :: { y :: (Float, Float) -> Float })
     -> { x :: Float }
*/
module D(Z) {
  val x = Z.y(0,0) + 1
}

/*
PASS - poly-res module call
E :: (Z :: { y :: (Float, Float) -> a })
     -> { x :: a }
*/
module E(Z) {
  val x = Z.y(0,0)
}

/*
PASS - poly-arg module call
F :: (Z :: { y :: a -> Float, z :: a })
     -> { x :: Float }
*/
module F(Z) {
  val x = Z.y(Z.z) + 1
}

/*
PASS - poly-arg and poly-res module call
G :: (Z :: { y :: a -> b, z :: a })
     -> { x :: b }

*/
module G(Z) {
  val x = Z.y(Z.z)
}

/*
PASS - multi-functor, poly-res module-call
H :: (Z :: { y :: (a, Float) -> b },
      Y :: { z :: a })
     -> { x :: b }
*/
module H(Z, Y) {
  val x = Z.y(Y.z, 1)
}

/*
PASS - component defs, static
I :: (Z :: { y :: Bool })
     -> { comA :: Bool -> Bool }
*/
module I(Z) {
  component comA(x) => (x or Z.y) where { }
}

/*
PASS - component defs, poly
J :: (Z :: { x :: Float, y :: a})
     -> { comA :: (Float, b) -> (Float, a, b) }
*/
module J(Z) {
  component comA(x, z) => (y, Z.y, z) where {
    val y = x + Z.x
  }
}

/*
// PASS - component defs, poly arg and =>
K :: (Z :: { comB :: a -> b, z :: c })
     -> { comA :: a -> (b, c) }
*/
module K(Z) {
  component comA(x) => (y, Z.z) where {
    val y = Z.comB(x)
  }
}

/*
// PASS - functor argsw with same name, should fail
J :: (A :: { z :: Float }, A :: { z :: Float })
     -> { y :: Float }
*/
module L(A, A) {
  component comA(x) => (y) where {
    val y = A.z + 1
  }
}

