/******************************************************************************
** Setup
******************************************************************************/
// Functor Arg
module Base {
  val x = 2
}


// Functor
module Func(Arg) {
    val y = 2 + Arg.x
    val x = 1
}

// Basic Refs
module BaseRef = Base
module FuncRef = Func
//ref of a ref
//module BaseRef2 = BaseRef

/******************************************************************************
** Applications with Var Args
** NOTE
** - All complete
******************************************************************************/

// direct apps with type-checking
module App = Func(Base)
//module C1 = Base(Base)
//module C2 = Func(Func)

// app using a ref'd-arg
// module D = Func(BaseRef)

// app using a ref'd-functor
//module E = FuncRef(Base)
//// and ref again
//module E1 = E

// wrapped apps with type-checking
module AppRef = FuncRef(BaseRef)
//module F1 = BaseRef(BaseRef)
//module F2 = FuncRef(FuncRef)
//module F3 = BaseRef(FuncRef)

// "recursive" app using the multi-references
//module P1 = F
//module P2 = FuncRef(P1)

/******************************************************************************
** Applications with Nested App Args
** NOTE
** - This seems to be trivially complete due to restrictions on Nested AppMods in modlang semantics
******************************************************************************/

module Func2(Arg1, Arg2) {
    val i = 2 + Arg2.x
    val j = Arg1.x + Arg2.y
}

// nested, direct app from var/app
//module T = Func2(Base, FuncRef(BaseRef))
module T = Func2(Base, AppRef)

