/******************************************************************************
** Basic Records
** NOTE
******************************************************************************/

/*
// create a trivial record
module Record1 {
    // record creation
    val rec = { i : 1 + 1, j : 2, k : 3 }
}
*/


// record creation and selection
module Record2a {
    // record creation
    val rec = { i : 1 + 1, j : 2, k : 3 }
    
    // record selection
    val x = rec#i + rec#j
}

/*
// record creation and selection
module Record2b {
    // record creation
    val rec = { i : 1 + 1, j : 2, k : 3 }
    
    val x = rec#i + rec#j
    // ? invalid record selection
    val y = rec#i + rec#rr
}

// record creation and selection within a component
module Record2c {
    // record creation
    val rec = { i : 1 + 1, j : 2, k : 3 }

    component f(x) {
      val y = x#i + x#j
      return none
    }
    
    // ? constrain the poly func    
    val z = f(rec)
}
*/

/*
// record unpacking --  error as not in tuple form
module Record3 {
    val a = { i : 1 {unit : m} + 1 {unit : m} , j : 2, k : 3 }

    component f(x) {
      val i, j, k = x
      return none
    }
    
    val b = f(a)
}

// record unpacking -- allowed as we simulate a tuple
module Record3 {
    val a = { elem1 : 1 + 1, elem2 : 2, elem3 : 3 }

    component f(x) {
      val i, j, k = x
      return none
    }
    
    val b = f(a)
}
*/

/*
// sub-typing within a piecewise
module Record4 {
    // record creation
    val rec = piecewise { true : {i : 1, j : 2}, default : { i : 2, j:2 } }
    // record selection
    val x = rec#i
}
*/



// subtyping on the component boundary - not allowed at present
module Record5 {
    // record creation
    val rec1 = { i : 1, j : 2, k : 3 }
    val rec2 = { i : 1, j : 2 }

    component f(x) {
      val y = x#i + x#j
      return none
    }
    
    // call the func with differing record super-types
    val _ = f(rec1)
    // val _ = f(rec2) //not allowed
    // val _ = f({ i: rec2#i, j : rec2#j, k : 3 }) // can create a dummy record shim to constrain to same super-type

}


