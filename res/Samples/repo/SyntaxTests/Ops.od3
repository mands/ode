// test basic ops
// basic computation - all immutable
/*
module BasicOps {

    // num ops
    val _ = 1 + 2 * 2

    // rel ops
    val _ = 1 > 2

    // log ops
    val _ = false or true

    // none
    val _ = none

    // test units within ops
    val _ = 1 { unit : m } + 2 { unit : m }
    val _ = 1 { unit : m } * 2 { unit : m }
    val _ = 1 { unit : m } / 2 { unit : m }

}
*/

/*
// test maths ops
module MathOps {
    val _ = sin(1)  // -- f -> f
    val _ = cos(1)      // -- f -> f
    val _ = tan(1)      // -- f -> f
    val a,b = sincos(1)     // -- f -> (f, f)
    val _ = asin(1)     // -- f -> f
    val _ = acos(1)     // -- f -> f
    val _ = atan(1)     // -- f -> f
    val _ = atan2(1,2)      // -- (f,f) -> f
    val _ = exp(1)      // -- f -> f
    val _ = exp2(1)     // -- f -> f
    val _ = exp10(1)    // -- f -> f
    val _ = pow10(1)    // -- f -> f
    val _ = log(1)      // -- f -> f
    val _ = log2(1)     // -- f -> f
    val _ = log10(1)    // -- f -> f
    val _ = logb(1)     // -- f -> f
    val _ = pow(1,2)        // -- (f, f) -> f
    val _ = sqrt(1)     // -- f -> f
    val _ = cbrt(1)     // -- f -> f
    val _ = hypot(1,2)      // -- (f,f) -> f
    val _ = expm1(1)    // -- f -> f
    val _ = log1p(1)    // -- f -> f
    val _ = sinh(1)     // -- f -> f
    val _ = cosh(1)     // -- f -> f
    val _ = tanh(1)     // -- f -> f
    val _ = asinh(1)    // -- f -> f
    val _ = acosh(1)    // -- f -> f
    val _ = atanh(1)    // -- f -> f
    val _ = erf(1)      // -- f -> f
    val _ = erfc(1)     // -- f -> f
    val _ = lgamma(1)   // -- f -> f
    val _ = gamma(1)    // -- f -> f
    val _ = tgamma(1)   // -- f -> f

}
*/


// test other ops
module OtherOps {
    //val _ = rand(none)

    // basic upow/uroot operation
    val a = upow(1 { unit : m }, 9)   // 1m^9
    val b = uroot(a, 3)               // 1m^3  // is div by 3??

    val c = upow(1 { unit : m^2 }, 3)   // 1m^6
    val d = uroot(c, 2)               // 1m^3  // is div by 2??

    // complex upow/uroot operation
    val _ = uroot(9 { unit : m^2}, 2) // becomes 3m
    // val _ = uroot(9 { unit : m^2}, 3) // Unit error, non-integer dimension

    // edge cases
    val _ = upow(1, 3)      // raise a NoUnit
    val _ = upow(1 { unit : m}, 0)      // raise to 0 - becomes NoUnit
    val _ = upow(1 { unit : m}, 1)      // raise to 1 - stays the same

    val _ = uroot(9, 2)      // sqrt a NoUnit
    //val _ = uroot(9 { unit : m}, 0)      // root 0 - Unit Error (div by zero)
    val _ = uroot(9 { unit : m}, 1)      // root 1 - stays the same
    val _ = uroot(9, 4)      // sqrt a NoUnit

    // negatives
    //val _ = upow(1 {unit : m}, -9)  // Parse error, negative ints not allowed
    // val _ = uroot(1 {unit : m}, -9)  // Parse error, negative ints not allowed
    // val _ = 1/a -- ERROR! TO FIX
}


