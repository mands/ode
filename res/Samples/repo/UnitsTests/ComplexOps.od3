module Units {
    // quantity aliases
    quantity length = dim L
    quantity mass = dim M
    //quantity time = dim T
    quantity current = dim I
    quantity temperature = dim O
    quantity amount_substance = dim N
    quantity luminous_intensity = dim J


    // base units - remember, quantity time, and units us, ms, s, min and hr already exist
    // units defs - ampere, metre & volt, siemens, farad,
    // only bsae units supported in defs - no aliasas for dervied units yet
    unit m { dim : L, SI : true }
    unit A { dim : I, SI : true }
    unit g { dim : M, SI : true }    
    
    // add cm
    unit cm { dim : L, SI : false }
    conversion { from : m, to : cm, factor : x * 100 }
    conversion { from : cm, to : m, factor : x / 100 }
    
    derived V { unit : kg.m^2.A^-1.s^3 }
    derived mV { unit : g.m^2.A^-1.s^3 }
    // derived mV { unit : V.m^1.mm^-1 }
    derived S { unit : m^-2.kg^-1.s^3.A^2 }
    derived mS { unit : m^-2.kg^-1.s^3.mA.A }
    derived F { unit : m^-2.kg^-1.s^4.A^2 }
    derived uF { unit : m^-2.kg^-1.s^4.mA^2 }

    derived curcm { unit : uA.cm^-2 }
    derived curmm { unit : uA.mm^-2 }
}


// MODEL - HH52
// OK
/*
module BasicModel { 
    import ComplexOps.Units as U

    val E_R = -75 { unit : mV }
    val Cm = 1 { unit : uF.cm^-2 }

    init V = -75 { unit : mV }

    val g_Na = 120 { unit : mS.cm^-2 }
    val E_Na = E_R + 115 { unit : mV }
    val i_Na = g_Na * (V - E_Na)

    ode { initVal : V, deltaVal : dV } = (i_Na / Cm) { unit : mV.s^-1 }
}
*/

/*
// OK
module FlatModel { 
    import ComplexOps.Units as U

    val E_R = -75 { unit : mV }
    val Cm = 1 { unit : uF.cm^-2 }
    init V = -75 { unit : mV }

    val alpha_m = (1 { unit : mV^-1 } * -0.1 * (V + 50 { unit : mV })) / (exp((1 { unit : mV^-1 } * -1 * (V + 50 { unit : mV })) / 10) - 1)
    val beta_m = 4 * exp((1 { unit : mV^-1} * -1 * (V + 75 { unit : mV })) / 18)

    init m = 0.05
    ode {initVal : m, deltaVal : dm } = (alpha_m*(1 - m) - beta_m*m) * 1 { unit : s^-1 }
    
    val alpha_h = 0.07 * exp((1 { unit : mV^-1 } * -1 * (V + 75 { unit : mV })) / 20)
    val beta_h = 1 / (exp((1 { unit : mV^-1 } * -1 * (V + 45 { unit : mV })) / 10) + 1)
    init h = 0.6
    ode {initVal : h, deltaVal: dh } = (alpha_h*(1 - h) - beta_h * h) * 1 { unit : s^-1 }
    
    val g_Na = 120 { unit : mS.cm^-2 }
    val E_Na = E_R + 115 { unit : mV }
    // val i_Na = g_Na * pow(m, 3.000001) * h * (V - E_Na)
    val i_Na = g_Na * upow(m, 3) * h * (V - E_Na)

    ode { initVal : V, deltaVal : dV } = ((-1 * (-1 * i_Na)) / Cm) { unit : mV.s^-1 } // + i_K + i_L)) / Cm

}
*/

/*
// MODEL - HH52
module CompModel { 
    import ComplexOps.Units as U
    val Cm = 1 { unit : uF.cm^-2 }

    component sodium_channel(V) {
        val g_Na = 120 { unit : mS.cm^-2 }
        val i_Na = g_Na * V
        return (i_Na)
    }

    init V = -75 { unit : mV }
    val i_Na = sodium_channel(V)

    ode { initVal : V, deltaVal : dV } = (i_Na / Cm) { unit : mV.s^-1 }
}
*/

/*
module CompModel1 { 
    import ComplexOps.Units as U

    val x = 1 { unit : s^-1 }
    init V = -75 { unit : m }

    component comp1(V) {
        val i = 120 { unit : s^-2 } * V
        return (i)
    }

    val y = comp1(V)

    ode { initVal : V, deltaVal : dV } = (y / x) { unit : m.s^-1 }
}
*/

module InverseConv {

  val x = 1 { unit : curmm }
  val y = x { unit : curcm }

  init a = 100
  ode { initVal : a } = 101 { unit : ms^-1 }
}

