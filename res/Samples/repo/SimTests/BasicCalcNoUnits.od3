// A collection of no-unit models

module BasicCalc1a {
    val a = 1
}

module BasicCalc1b {
    val a = 1 + 2
}

// negation of exprs - we use an ode so is not optimised away
module BasicCalc1c {
    init x = 10
    val pi = 3.14159
    val a = (x/x) * sin(pi) + 2 // = 0 + 2 = +2
    val b = -a + -((x/x) * 2 * cos(pi) * 3) // -2 + -(-6) = +4
    ode {init: x, delta : dx } = b
}


// basic ops - OK
module BasicCalc1 {
    val a = 1
    val b = a + 2
    val c = a * 2
}

// accessing time - OK
module BasicCalc2 {
    val a = time + 1
    val b = a + 1 { unit : s}
}

// math ops - OK
module BasicCalc3 {
    val a = 1
    val b = sin(1) + a // 1.84
    val c = sin(1) > 0.5 and cos(1) < 0.5 // 0.54
}

// piecewise - OK
module BasicCalc4 {
    val a = time
    val b = piecewise { a > 5 { unit : s} : True, default : False } 
}

// piecewise - OK
module BasicCalc4a {
    val a = time
    val b = piecewise { a > 5 { unit : s} : a + 1, default : a - 1 } 
}

// piecewise - OK
module BasicCalc4b {
    val a = time
    val b = piecewise { a > 5 { unit : s} : a + 1, default : a - 1 } 
    val c = piecewise { a < 5 { unit : s} : a > 1, default : a < 1 } 
}

// piecewise - OK
module BasicCalc4c {
    val a = time
    val b = piecewise { a > 5 { unit : s} : a + 1 + 2 + 3, default : a - 1 } 
}


// svals - OK
module BasicCalc5a {
    init a = 0.1 + 1
}

module BasicCalc5 {
    init a = 0
    val b = a + 1
}

// basic ode - OK
module BasicCalc6 {
    init x = 0 { unit : m }
    ode {init: x, delta : dx } = 5 { unit : m.s^-1 }
}

// tuples - OK
module BasicCalc7a {
    val a = time
    val b = (True, a)

    val c,d = b
    val e = d * time
}


// tuples - OK
module BasicCalc7b {
    init x = 0
    val b = (1, x)

    val c,d = b
    ode {init: x, delta : dx } = c // dx = 1
}

// gen a tuple ref inst
module BasicCalc7c {
    val b = piecewise { time > 5 : (True, 1), default : (False, 1) }
    val c,d = b
    val e = d + 1
}

// tuples - returing and passing around - OK and optimised
module BasicCalc7d {
    component f (x) {
        return (x+1, x-1)
    }

    val a = f(1)
    val b,c = a
}

// const tuple return from a piecewise (i.e. a separate basic-block)
module BasicCalc7e {
    val a = time
    val b, c = piecewise  { a > 5 { unit : s} : (1 + 1, 1 - 1)
                          , default : (2 + 2, 2 - 2)
                          } 
}

// dyn tuple return from a piecewise (i.e. a separate basic-block)
module BasicCalc7f {
    val a = time
    val b, c = piecewise  { a > 5 { unit : s} : (a + 1, a - 1)
                          , default : (a + 2, a - 2)
                          } 
    val d = b + c
}

// records - OK
module BasicCalc8 {
    init x = 0
    val b = { rec1: 1, rec2 : x }
    ode {init: x, delta : dx } = b#rec1 // dx = 1
}

// components
// const
module BasicCalc9 {
    init x = 0
    component comp(x) {
        return (x+1)
    }
    ode {init: x, delta : dx } = comp(4) // dx = 5
}

// stateful
module BasicCalc10 {
    component mkOde(i) {
        init x = 1
        ode {init: x, delta : dx } = i
        return dx
    }
    val _ = mkOde(5) // dx = 5
    val _ = mkOde(10) // dx = 10
}


// modules import
module BasicCalc11a {
    val a = 5 { unit : m.s^-1 }
}

module BasicCalc11b {
    import SimTests.BasicCalcNoUnits.BasicCalc11a as A
    init x = 0 { unit : m }
    ode {init: x, delta : dx } = A.a // dx = 5
}

// module functor
module BasicCalc11c(A) {
    init x = 0 { unit : m }
    ode {init: x, delta : dx } = A.a // dx 5
}

module BasicCalc11d = BasicCalc11c(BasicCalc11a)
// etc..

// nested comps
module BasicCalc12 {
    component f (x) {
        component g (y) {
            return (y + 1)
        }
        return g(x)
    }

    init a = f(1)
}

// init and non-init values
module BasicCalc13 {
    // val a = 2
    component f(x) {
        return (x+1)
    }
    init b = 1 + f(1)
}

module BasicCalc13a {
    // val a = 2
    component f(x) {
        return (x+1)
    }
 
    component o(y) {
        init x = 2 + f(1)
        ode {init: x, delta : dx } = 1 + f(y)
        return (x+3)
    }

    val _ = o(1) // init=4, dx=3
}


