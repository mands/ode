// basic sde
module Sde1 {
    //b = sde { initVal : 10.0, deltaVal: 0, diffusion: 1.0 }
    init b = 10.0
    sde { initVal : b, deltaVal : db, diffusion : 1.0 * wiener } = 0
}

// module varient
module Sde1a {
    init b = 10.0
}
// basic sde
module Sde1b {
    import SimTests.Sdes.Sde1a as A
    sde { initVal : A.b, deltaVal : db, diffusion : 1.0*wiener } = 0
}

// more complex sde
module Sde2 {
    //b { type : sde, wrt: t, initVal : 45.3, diffusion: 34 * a} = 23.0;
    //b = sde { wrt: t, initVal : 45.3, exp: 23.0 + t, diffusion: 34 * a }
    init b = 45.3
    sde { initVal : b, deltaVal : db, diffusion : 34*wiener } = 23    
}

// expression in diffusion
module Sde3 {
    val a = 0.5
    init b = 45.3
    sde { initVal : b, deltaVal : db, diffusion: (34 + a)*wiener } = 23
}

// Ornsteinâ€“Uhlenbeck process
// http://en.wikipedia.org/wiki/Ornstein%E2%80%93Uhlenbeck_process
module Sde4 {
    val theta = 1
    val mu = 20
    val sigma = 10
    init y = 0.5
    sde { initVal : y, deltaVal : dy, diffusion : sigma} = theta*(mu-y)
}

module Sde5 {
    val theta=1
    val mu=1.2
    val sigma=0.3
    init y = 0
    sde { initVal : y, deltaVal : dy, diffusion : sigma} = theta*(mu-y)
}

