// testTusscher sample
// - first as static model from orig/CellML
// - then optimised basic-Ode (restructure into common use)
// - then high-level Ode (i.e. reuse components, Higher order funcs)
// - then modularise
// - then look for similarities between other models and build framework


// Ode-specific varient of tenTusscher
module TenTusscher1 {
  // top level constants
  val R = 8314.472 {unit : joule/mole * kelvin}
  val T = 310 {unit : kelvin}
  val F = 96485.3415 {unit : coulomb / milli mole}
  
  // :: a -> Unit
  component environment _ => () where {
    val i_Stim = stimulus_current ()

    val V, V_c, Cm  = membrane (i_Stim, i_K1, i_to, i_Kr, i_Ks, i_CaL, i_NaK, i_Na, i_b_Na, i_NaCa, i_b_Ca, i_p_K, i_p_Ca)
 
    val Ca_Dyn = calcium_dynamics (V, V_c, d, Cm, i_CaL, i_NaCa, i_p_Ca, i_b_Ca)
    val Na_Dyn = sodium_dynamics (V, V_c, C_m, i_Na, i_NaCa, i_NaK, i_b_Na)
    val K_Dyn = potassium_dynamics (V, V_c, C_m, i_K1, i_to, i_NaK, i_Kr, i_Ks, i_p_K, i_Stim)    

    val E_Na, E_K, E_Ks, E_Ca = reverse_potentials (Na_Dyn, K_Dyn, Ca_Dyn)    
   
    val I_K1 = inward_rectifier_potassium_current (V, E_K, K_Dyn)
    val I_Kr = rapid_time_dependent_potassium_current (V, E_K, K_Dyn)
    val i_Ks = slow_time_dependent_potassium_current (V, E_Ks)

    val i_Na = fast_sodium_current (V, E_Na)
    val i_b_Na = sodium_background_current (V, E_Na)

    val i_CaL = L_type_Ca_current (V, Ca_Dyn)
    val i_b_Ca = calcium_background_current (V, E_Ca)

    val i_to = transient_outward_current (V, E_K)

    val i_NaK = sodium_potassium_pump_current (V, Na_Dyn, K_Dyn)
    val i_NaCa = sodium_calcium_exchanger_current (V, Na_Dyn, Ca_Dyn)
    val i_p_Ca = calcium_pump_current Ca_Dyn
    val i_p_K = potassium_pump_current (V, E_K)
    
  }
  
  component stimulus_current _ => i_Stim where {
    // stimulus constants
    val stim_period = 1000
    val stim_start = 10
    val stim_duration = 1
    val stim_amplitude = 52

    // main stimulus
    val i_Stim = piecewise { 
        (time - floor(time / stim_period) * stim_period >= stim_start and time - floor(time / stim_period) * stim_period <= stim_start + stim_duration) : -(stim_amplitude)
        default : 0
      }
  }
  
  // main component
  // :: (Float x 13) -> (Float x 5)
  component membrane (i_Stim, i_K1, i_to, i_Kr, i_Ks, i_CaL, i_NaK, i_Na, i_b_Na, i_NaCa, i_b_Ca, i_p_K, i_p_Ca) => (V, V_c, Cm) where {
    // constants
    val Cm {unit : micro F} = 0.185
    val V_c {unit : (micro metre)^3} = 0.0164404

    // main AP calc
    ode V {init:-86.2, unit:milli V} = (-1/1) * (i_K1 + i_to + i_Kr + i_Ks + i_CaL + i_NaK + i_Na + i_b_Na + i_NaCa + i_b_Ca + i_p_K + i_p_Ca + i_Stim)
  }

  // a commmon component used by many
  // :: (Float x 6) -> (Float x 4)
  component reverse_potentials (Na_Dyn, K_Dyn, Ca_Dyn) => (E_Na, E_K, E_Ks, E_Ca) where {
    val P_kna = 0.03
    val E_Na = R * T / F * ln(Na_Dyn.o / Na_Dyn.i)
    val E_K = R * T / F * ln(K_Dyn.o / K_Dyn.i)
    val E_Ks = R * T / F * ln((K_Dyn.o + P_kna * Na_Dyn.o) / (K_Dyn.i + P_kna * Na_Dyn.i))
    val E_Ca = 0.5* R * T / F * ln(Ca_Dyn.o / Ca_Dyn.i)
  }

  // new current
  // :: (Float x 3) -> Float
  component inward_rectifier_potassium_current (V, E_K, K_Dyn) => I_K1 where {
    val g_K1 = 5.405
    val alpha_K1 = 0.1 / (1 + exp(0.06 * (V - E_K - 200)))
    val beta_K1 = (3 * exp(0.0002 * (V - E_K + 100)) + exp(0.1 * (V - E_K - 10 ))) / (1 + exp(-(0.5) * (V - E_K)))
    val xK1_inf = alpha_K1 / (alpha_K1 + beta_K1)
    val i_K1 = g_K1 * xK1_inf * sqrt(K_Dyn.o / 5.4) * (V - E_K)
  }


  // new current
  // :: (Float x 3) -> Float
  component rapid_time_dependent_potassium_current (V, E_K, K_Dyn) => i_Kr where {
    val g_Kr = 0.096
    val Xr1 = rapid_time_dependent_potassium_current_Xr1_gate V
    val Xr2 = rapid_time_dependent_potassium_current_Xr2_gate V
    val i_Kr = g_Kr * sqrt(K_Dyn.o / 5.4) * Xr1 * Xr2 * (V - E_K)
  }

  // :: Float -> Float
  component rapid_time_dependent_potassium_current_Xr1_gate V => Xr1 where {
    val xr1_inf = 1 / (1 + exp((-26 - V) / 7))
    val alpha_xr1 = 450 / (1 + exp((-45 - V) / 10 ))
    val beta_xr1 = 6 / (1 + exp((V + 30) / 11.5))
    val tau_xr1 = 1 * alpha_xr1 * beta_xr1
    ode Xr1 {init: 0} = (xr1_inf - Xr1) / tau_xr1  
  }
  
  // :: Float -> Float
  component rapid_time_dependent_potassium_current_Xr2_gate V => Xr2 where {
    val xr2_inf = 1 / (1 + exp((V + 88) / 24 ))
    val alpha_xr2 = 3 / (1 + exp((-60 - V) / 20))
    val beta_xr2 = 1.12  / (1 + exp((V - 60 ) / 20 ))
    val tau_xr2 = 1 * alpha_xr2 * beta_xr2
    ode Xr2 {init : 1} = (xr2_inf - Xr2) / tau_xr2
  }

  // new current
  // :: (Float, Float) -> Float
  component slow_time_dependent_potassium_current (V, E_Ks) => i_Ks where {
    val g_Ks = 0.062
    val Xs = slow_time_dependent_potassium_current_Xs_gate V
    val i_Ks = g_Ks * pow(Xs, 2) * (V - E_Ks)  
  }

  // :: Float -> Float
  component slow_time_dependent_potassium_current_Xs_gate V => Xs where {
    val xs_inf = 1 / (1 + exp((-5 - V) / 14))
    val alpha_xs = 1100  / root(1 + exp(-10 - V) / 6 ))
    val beta_xs = 1 / (1 + exp((V - 60 ) / 20))
    val tau_xs = 1 * alpha_xs * beta_xs
    ode Xs {init : 0} = (xs_inf - Xs) / tau_xs
  }
  
  // new current
  // :: (Float, Float) -> Float
  component fast_sodium_current (V, E_Na) => i_Na where {
    val g_Na = 14.838
    val m = fast_sodium_current_m_gate V
    val h = fast_sodium_current_h_gate V
    val j = fast_sodium_current_j_gate V
    val i_Na = g_Na * pow(m, 3) * h * j * (V - E_Na)
  }
  
  // :: Float -> Float
  component fast_sodium_current_m_gate V => m where {
    val m_inf = 1 / pow(1 + exp((-56.86 - V) / 9.03), 2)
    val alpha_m = 1 / (1 + exp((-60 - V) / 5))
    val beta_m = 0.1 / (1 + exp((V + 35) / 5)) + 0.1 / (1 + exp((V - 50) / 200))
    val tau_m = 1 * alpha_m * beta_m
    ode m {init : 0} = (m_inf - m) / tau_m
  }
  
  // :: Float -> Float
  component fast_sodium_current_h_gate V => h where {
    val h_inf = 1 / pow(1 + exp((V + 71.55) / 7.43), 2 )
    val alpha_h = piecewise{
      V < -40 : 0.057 * exp(-((V + 80)) / 6.8),
      default : 0
    }
    val beta_h = piecewise{
      (V < -40) : 2.7 * exp(0.079 * V) + 310000 * exp(0.3485 * V) 
      default : 0.77 / (0.13 * (1 + exp((V + 10.66) / -(11.1))))
    }
    val tau_h = 1 / (alpha_h + beta_h)
    ode h {init : 0.75} = (h_inf - h) / tau_h
  }
  
  // :: Float -> Float
  component fast_sodium_current_j_gate V => j where {
    val j_inf = 1 / pow(1 + exp((V + 71.55) / 7.43), 2)
    val alpha_j = piecewise{
      V < -40 :
        (-25428 * exp(0.2444 * V) - 6.948E-6 * exp(-0.04391 * V)) * (V + 37.78) / 1 / (1 + exp(0.311 * (V + 79.23)))
      default : 0
    }
    val beta_j = piecewise{
      V < -40 :
        0.02424 * exp(-0.01052 * V) / (1 + exp(-0.1378 * (V + 40.14))) 
      default : 0.6 * exp(0.057 * V) / (1 + exp(-0.1 * (V + 32)))
    }
    val tau_j = 1 / (alpha_j + beta_j)
    ode j {init : 0.75} = (j_inf - j) / tau_j
  }
  
  // new current
  // :: (Float, Float) -> Float
  component sodium_background_current (V, E_Na) => i_b_Na where {
    val g_bna = 0.00029
    val i_b_Na = g_bna * (V - E_Na)
  }
  
  // new current
  // :: (Float x 3) -> Float
  component L_type_Ca_current (V, Ca_Dyn) => i_CaL where {
    val g_CaL = 0.000175
        
    val d = L_type_Ca_current_d_gate V
    val f = L_type_Ca_current_f_gate V
    val fCa = L_type_Ca_current_fCa_gate V
    
    val i_CaL = g_CaL * d * f * fCa * 4 * V * pow(F, 2) / (R * T) * (Ca_Dyn.i * exp(2 * V * F / (R * T)) - 0.341 * Ca_Dyn.o) / (exp(2 * V * F / (R * T)) - 1)
  }
  
  // :: Float -> Float
  component L_type_Ca_current_d_gate V => d where {
    val d_inf = 1 / (1 + exp((-5 - V) / 7.5))
    val alpha_d = 1.4 / (1 + exp((-35 - V) / 13)) + 0.25
    val beta_d = 1.4 / (1 + exp((V + 5) / 5))
    val gamma_d = 1 / (1 + exp((50 - V) / 20))
    val tau_d = 1 * alpha_d * beta_d + gamma_d
    ode d {init : 0} = (d_inf - d) / tau_d
  }

  // :: Float -> Float
  component L_type_Ca_current_f_gate V => f where {
    val f_inf = 1 / (1 + exp((V + 20) / 7))
    val tau_f = 1125 * exp(-(pow(V + 27, 2)) / 240) + 80 + 165 / (1 + exp((25 - V) / 10))
    ode f {init : 1} = (f_inf - f) / tau_f
  }

  // :: Float -> Float
  component L_type_Ca_current_fCa_gate V => fCa where {
    val alpha_fCa = 1 / (1 + pow(Ca_i / 0.000325, 8))
    val beta_fCa = 0.1 / (1 + exp((Ca_i - 0.0005) / 0.0001))
    val gama_fCa = 0.2 / (1 + exp((Ca_i - 0.00075) / 0.0008))
    val fCa_inf = (alpha_fCa + beta_fCa + gama_fCa + 0.23) / 1.46
    val tau_fCa = 2
    val d_fCa = (fCa_inf - fCa) / tau_fCa
    ode fCa {init : 1} = piecewise{
      fCa_inf > fCa and V > -(60 {unit: millivolt}) : 0,
      default : d_fCa
    }
  }
  
  // new current  
  // :: (Float, Float) -> Float
  component calcium_background_current (V, E_Ca) => i_b_Ca where {
    val g_bca = 0.000592    
    val i_b_Ca = g_bca * (V - E_Ca)
  }
  
  // new current
  // :: (Float, Float) -> Float
  component transient_outward_current (V, E_K) => i_to where {
    val g_to = 0.294 {unit : nano S / pico F}
    val s = transient_outward_current_s_gateoutward V
    val r = transient_outward_current_r_gate V
    
    val i_to = g_to * r * s * (V - E_K)
  }

  // :: Float -> Float
  component transient_outward_current_s_gateoutward V => s where {
    val s_inf = 1 / (1 + exp((V + 20) / 5))
    val tau_s = 85 * exp(-(pow(V + 45, 2)) / 320) + 5 / (1 + exp((V - 20) / 5)) + 3
    ode s {init : 1} = (s_inf - s) / tau_s
  }

  // :: Float -> Float  
  component transient_outward_current_r_gate V => r where {
    val r_inf = 1 / (1 + exp((20 - V) / 6))
    val tau_r = 9.5 * exp(-(pow(V + 40, 2)) / 1800) + 0.8
    ode r {init : 0} = (r_inf - r) / tau_r
  }
  
  // new current
  // :: (Float x 3) -> Float
  component sodium_potassium_pump_current (V, Na_Dyn, K_Dyn) => i_NaK where {
    val P_NaK = 1.362
    val K_mk = 1
    val K_mNa = 40

    val i_NaK = P_NaK * K_Dyn.o / (K_Dyn.o + K_mk) * Na_Dyn.i / (Na_Dyn.i + K_mNa) / (1 + 0.1245 * exp(-(0.1) * V * F / (R * T)) + 0.0353 * exp(-(V) * F / (R * T)))
  }
  
  // new current
  // :: (Float x 8) -> Float
  component sodium_calcium_exchanger_current (V, Na_Dyn, Ca_Dyn) => i_NaCa where {
    val K_NaCa = 1000
    val K_sat = 0.1

    val alpha = 2.5
    val gamma = 0.35

    val Km_Ca = 1.38
    val Km_Nai = 87.5

    val i_NaCa = K_NaCa * (exp(gamma * V * F / (R * T)) * pow(Na_Dyn.i, 3) * Ca_Dyn.o - exp((gamma - 1) * V * F / (R * T)) * pow(Na_Dyn.o, 3) * Ca_Dyn.i * alpha) / ((pow(Km_Nai, 3) + pow(Na_Dyn.o, 3)) * (Km_Ca + Ca_Dyn.o) * (1 + K_sat * exp((gamma - 1) * V * F / (R * T))))
  }
    
  // new current
  // :: Float -> Float
  component calcium_pump_current Ca_Dyn => i_p_Ca where {
    val g_pCa = 0.825
    val K_pCa = 0.0005
    val i_p_Ca = g_pCa * Ca_Dyn.i / (Ca_Dyn.i + K_pCa)
  }
  
  // new current
  // :: (Float, Float) -> Float
  component potassium_pump_current (V, E_K) => i_p_K where {
    val g_pK = 0.0146
    val i_p_K = g_pK * (V - E_K) / (1 + exp((25 - V) / 5.98))
  }
  
  // new current
  // :: (Float x 8) -> {i : Float, o : Float}
  component calcium_dynamics (V, V_c, d, Cm, i_CaL, i_NaCa, i_p_Ca, i_b_Ca) => Ca_Dyn where {
    val tau_g = 2
    val a_rel = 0.016464
    val b_rel = 0.25
    val c_rel = 0.008232
    val K_up = 0.00025
    val V_leak = 8e-5
    val Vmax_up = 0.000425
    val Buf_c = 0.15
    val K_buf_c = 0.001
    val Buf_sr = 10
    val K_buf_sr = 0.3
    val V_sr = 0.001094
    
    val i_rel = (a_rel * pow(Ca_SR, 2) / (pow(b_rel, 2) + pow(Ca_SR, 2)) + c_rel) * d * g
    val i_up = Vmax_up / (1 + pow(K_up, 2) / pow(Ca_i, 2))
    val i_leak = V_leak * (Ca_SR - Ca_i)
    val g_inf = piecewise{
       Ca_i < 0.00035 : 1 / (1 + pow(Ca_i / 0.00035, 6)),
       default : 1 / (1 + pow(Ca_i / 0.00035, 16))}
    val d_g = (g_inf - g) / tau_g

    ode g {init : 1} = piecewise {
      g_inf > g and V > -60 : 0,
      default : d_g }

    val Ca_i_bufc = 1 / (1 + Buf_c * K_buf_c / pow(Ca_i + K_buf_c, 2))
    val Ca_sr_bufsr = 1 / (1 + Buf_sr * K_buf_sr / pow(Ca_SR + K_buf_sr, 2))

    ode Ca_i {init: 0.0002} = Ca_i_bufc * (i_leak - i_up + i_rel - 1 * (i_CaL + i_b_Ca + i_p_Ca - 2 * i_NaCa) / (2 * 1 * V_c * F) * Cm)
    val Ca_Dyn = {i : Ca_i, o : 2}
    ode Ca_SR {init: 0.2} = Ca_sr_bufsr * V_c / V_sr * (i_up - (i_rel + i_leak))
  }
    
  // new current
  // :: (Float x 7) -> {i : Float, o : Float}
  component sodium_dynamics (V, V_c, C_m, i_Na, i_NaCa, i_NaK, i_b_Na) => Na_Dyn where {
    ode Na_i {init: 11.6} = -1 * (i_Na + i_b_Na + 3 * i_NaK + 3 * i_NaCa) * Cm / (1 * V_c * F)
    val Na_Dyn = {i : Na_i, o : 140}
  }
  
  // new current
  // :: (Float x 10) -> {i : Float, o : Float}
  component potassium_dynamics (V, V_c, C_m, i_K1, i_to, i_NaK, i_Kr, i_Ks, i_p_K, i_Stim) => K_Dyn where {
    ode K_i {init: 138.3} = -1 * (i_K1 + i_to + i_Kr + i_Ks + i_p_K + i_Stim - 2 * i_NaK) * Cm / (1 * V_c * F)
    val K_Dyn = {i : K_i, o : 5.4}
  }
}

