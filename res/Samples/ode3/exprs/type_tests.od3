module A {
// PASS - test basic top lets
	val X1 = 3
	val Y1 = 3 + 3
	val Z1 = 3 > 0 and Y1 > X1


// PASS - test component - Float -> Float
    component inc(x) => (x + 1) where { }
    val X2 = inc(3)
    val Y2 = X2 + X2
    val Z2 = Y2 + X2 + 23 
    val W2 = inc(5) + 2
    // what the fuck!
    // val Z2 = Y2 + X2 + Z2

// PASS - test component-local lets
    component let(x) => (x+y) where {
	    val y = x + 1
	}
	
// more complicated components
// PASS - test (Float, Float) -> Float
    component add(x, y) => (x + y) where { }
    val X3 = add(3, 4)
	
// PASS - test (Float, Float) -> (Float, Float)
    component addsub(x, y) => (x + y, x - y) where { }
    val X4,Y4 = addsub(3, 4)
	// val Y,Z = X

// PASS - nested expressions
    component add(x, y) => (x + y) where { }
    component dec(x) => (x -1) where { }
    val Y5 = 2
    val X5 = add(3, dec(Y5))

// boolean tests
    component gt(x, y) => (x > y) where { }
    component lt(x, y) => (x < y) where { }
    component comAnd(x, y) => (x and y) where { }
    component comOr(x, y) => (x or y) where { }
    val X6 = comAnd(gt(2, 1), lt(2, 1))
    val X7 = comOr(gt(2, 1), lt(2, 1))

// PASS - component-local type error
/*
    component let2(x) => (y, z) where {
	    val y = x + 1
		  val z = x and y
	}
*/

// PASS - polymorphism test for lit module, should fail as cannot unify without uses
/*
    component id(x) => (x) where { }
*/

// PASS - polymorphism test for lit module, should pass
    component id(x) => (x) where { }
  	val X7 = id(1) + 1

// PASS - comopnent artity and type errors
//    val X8 = inc(1,2)
//    val Y8 = add(1)
//    val Z8 = comAnd(1,2)
//    val W8 = add(1>1,0>0)

// PASS - call a val, add a component
//    val X9 = X1(1,2)
//    val Y9 = add + 2

// PASS - tuple unpacking error
  val a, b = (true,false,true)
  val c,d,e = (1,2)




}

// PASS - component params/HOFs
// multiple tvars are set to each each other in contrainsts,
// substitution and insertion during pattern matching now handles updates by readding sub to constraint set
module K {
  component comA comParam => comParam(1) where { }
  
  component comB a => (a + 1) where { }
  
  val call = comA(comB)
}

